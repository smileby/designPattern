State
定义
【状态模式】允许对象在其内部状态改变时改变他的行为。对象看起来似乎改变了他的类。

模式结构：
模式结构
环境角色（Context）：定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。
抽象状态角色（State）：定义一个接口，用以封装环境（Context）对象的一个特定的状态所对应的行为。
具体状态角色（ConcreteState）：每一个具体状态类都实现了环境（Context）的一个状态所对应的行为。

优点：
封装了转换规则
枚举可能的状态，在枚举状态之前需要确定状态种类
将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为
允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块
可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数

缺点：
增加系统类和对象的个数
结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱
对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码


使用场景：
对象的行为依赖于它的某些属性值，状态的改变将导致行为的变化
在代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，并且导致客户类与类库之间的耦合增强
