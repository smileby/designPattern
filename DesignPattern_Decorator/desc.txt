
Decorator

描述：
	【装饰模式】动态地给一个对象增加一些额外的职责，就增加的功能来说，Decorator模式相比生成子类更加灵活。

使用场景：
	想要向一个现有的对象添加新的功能,同是又不改变其结构.这样可以在不增加子类的情况下扩展类动态增加功能,动态撤销.
	
优点：
	1、装饰类和被装饰类可以独立发展，不会相互耦合
	2、装饰模式是继承的一个替代模式，但它提供了比继承更高的灵活性
	3、装饰模式可以动态的方式扩展一个实现类的功能，在运行时选择不同的装饰器，从而实现不同的行为。

缺点：
	1、若实现多层装饰后代码结构会比较复杂 